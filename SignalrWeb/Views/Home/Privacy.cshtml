@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<style type="text/css">
    .container {
        background-color: #99CCFF;
        border: thick solid #808080;
        padding: 20px;
        margin: 20px;
    }
</style>
<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <div class="container">
        <input type="text" id="message" />
        <input type="button" id="sendmessage" value="Send" />
        <ul id="discussion"></ul>
    </div>
    <!--Script references. -->
    <!--Reference the SignalR library. -->
    <!--<script type="text/javascript"  src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.3/signalr.min.js"></script>-->
    <script type="text/javascript" src="~/js/signalr.min.js"></script>
    <script type="text/javascript" src="~/js/jscookie.js"></script>
    <!--Add script to update the page and send messages.-->
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {

            
            var messageInput = document.getElementById('message');
            // Get the user name and store it to prepend to messages.
            var name = prompt('Enter your name:', '');
            var loginToken = getCookie("signalrusername");
            console.log('loginToken', loginToken)
            if (loginToken == null) {
                return;
            }
            // Set initial focus to message input box.
            messageInput.focus();

            // Start the connection.
            var connection = new signalR.HubConnectionBuilder()
                .withUrl('http://localhost:5000/chatHub', { accessTokenFactory: () => loginToken })
                .build();

            // Create a function that the hub can call to broadcast messages.
            connection.on('broadcastMessage', function (name, message) {
                // Html encode display name and message.
                var encodedName = name;
                var encodedMsg = message;
                // Add the message to the page.
                var liElement = document.createElement('li');
                liElement.innerHTML = '<strong>' + encodedName + '</strong>:&nbsp;&nbsp;' + encodedMsg;
                document.getElementById('discussion').appendChild(liElement);
            });

            // Transport fallback functionality is now built into start.
            connection.start()
                .then(function () {
                    console.log('connection started');
                    document.getElementById('sendmessage').addEventListener('click', function (event) {
                        // Call the Send method on the hub.
                        connection.invoke('send', name, messageInput.value);

                        // Clear text box and reset focus for next comment.
                        messageInput.value = '';
                        messageInput.focus();
                        event.preventDefault();
                    });
                })
                .catch(error => {
                    if (error.statusCode) {//判断undefined、null与NaN
                        if (error.statusCode == "401") {
                            alert("error.message == Unauthorized");
                        }
                    } else {
                        console.error(error.toString());
                    }
                });
        });
    </script>
</div>
